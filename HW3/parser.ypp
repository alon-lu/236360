%{
	#include <iostream>
	#include <stdlib.h>
	using namespace std;
	extern int yylex();
	int yyerror(const char * message);
	#include "hw3_output.hpp"
	#include "classes.hpp"
%}

%nonassoc VOID;//
%nonassoc INT;//
%nonassoc BYTE;//
%nonassoc B;//
%nonassoc BOOL;///
%nonassoc ENUM;////
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMA;
%nonassoc LBRACE;
%nonassoc RBRACE;
%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%right ASSIGN;
%left OR;
%left AND;
%left RELOPL;
%nonassoc RELOPN;
%left ADD;
%left MUL;
%left RPAREN;
%right IF;
%right ELSE;
%left LPAREN;
%right NOT;
%nonassoc XXX;
%nonassoc XX;
%%

Program :		  	 {$$=Program PROGRAM;} Enums Funcs;
Funcs :	     	    %prec XXX {$$=Funcs FUNCS;}
								 | FuncDecl Funcs %prec XX{$$=Funcs FUNCS};

FuncDecl :   	   RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE {$$=FuncsDecl FUNCDECL($1,$2,$4)};//todo //opening scope
Enums :			  	   //epsilon
								 | EnumDecl Enums {};//this is empty on purpose
EnumDecl :   	   ENUM ID LBRACE EnumeratorList RBRACE SC {$$=EnumDecl ENUMDECL($2,$4);};
RetType : 	  	 Type {$$=RetType RETTYPE($1);}
								 | VOID {$$=RetType RETTYPE($1);};
Formals :     	   {}
								 |FormalsList {$$=Formals FORMALS($1);};
FormalsList : 	 FormalDecl {$$=FormalsList FORMALLIST($1);}
								 | FormalDecl COMMA FormalsList {$$=FormalsList FORMALLIST($2,$1);};
FormalDecl :  	 Type ID {$$=FormalDecl FORMALDECL($1,$2);}//checking that the types exist
								 | EnumType ID {$$=FormalDecl FORMALDECL($1,$2);};
EnumeratorList : Enumerator  {$$=EnumeratorList ENUMERATORLIST($1);}
								 | EnumeratorList COMMA Enumerator {$$=EnumeratorList ENUMERATORLIST($1,$2);};
Enumerator : 		 ID {$$=Enumerator ENUMARATOR($1);};
Statements : 	   Statement {output::printProductionRule(19);}
								 | Statements Statement {output::printProductionRule(20);};
Statement : 		 LBRACE Statements RBRACE {$$=Statement STATEMENT($2);}//opening scope
								 | Type ID SC {$$=Statement STATEMENT($1,$2);}//done
								 | EnumType ID SC {$$=Statement STATEMENT($1,$2);}//done
								 | EnumDecl {$$=Statement STATEMENT($2);}
								 | Type ID ASSIGN Exp SC {$$=Statement STATEMENT($1,$2,$3);}//done
								 | EnumType ID ASSIGN Exp SC {$$=Statement STATEMENT($1,$2,$3);}//done
								 | ID ASSIGN Exp SC {$$=Statement STATEMENT($2);}
								 | Call SC {$$=Statement STATEMENT($2);}
								 | RETURN SC {$$=Statement STATEMENT($2);}
								 | RETURN Exp SC {$$=Statement STATEMENT($2);}
								 | IF LPAREN Exp RPAREN Statement {$$=Statement STATEMENT($2);}//opening scope
								 | IF LPAREN Exp RPAREN Statement ELSE Statement {$$=Statement STATEMENT($2);}//opening 2 scope
								 | WHILE LPAREN Exp RPAREN Statement {$$=Statement STATEMENT($1,$3,$4);}//opening scope
								 | BREAK SC {$$=Statement STATEMENT($1);}
								 | CONTINUE SC {$$=Statement STATEMENT($1);};
Call :       	   ID LPAREN ExpList RPAREN {output::printProductionRule(36);}
								 | ID LPAREN RPAREN {output::printProductionRule(37);};
ExpList : 		 	 Exp {$$=ExpList EXPLIST($1);}
								 | Exp COMMA ExpList {$$=ExpList EXPLIST($1,$3)};
Type : 		 			 INT {$$=Type TYPE($1)};//
								 | BYTE {$$=Type TYPE($1)};
								 | BOOL {$$=Type TYPE($1)};
EnumType : 	  	 ENUM ID {$$=EnumType ENUMTYPE($1,$2)};//
Exp :      	  	 LPAREN Exp RPAREN {$$=Exp EXP($2);}//done
								 | Exp AND Exp {$$=Exp EXP($1,$2,$3,"AND");}//done
								 | Exp OR Exp {$$=Exp EXP($1,$2,$3,"OR");}//done
								 | ID {$$=Exp EXP($1);}//done
								 | Call {output::printProductionRule(47);}
								 | NUM {$$=Exp EXP($1,"num");}//done
								 | NUM B {$$=Exp EXP($1,"B";}//done
  						   | STRING {$$=Exp EXP($1,"string");}//done
								 | TRUE {$$=Exp EXP($1,"bool");}//done
								 | FALSE {$$=Exp EXP($1,"bool");}//done
								 | NOT Exp {$$=Exp EXP($1,$2);}//done
								 | Exp RELOPL Exp {$$=Exp EXP($1,$2,$3,"RELOPL");}//done
								 | Exp RELOPN Exp {$$=Exp EXP($1,$2,$3,"RELOPN");}//done
  						   | Exp ADD Exp {$$=Exp EXP($1,$2,$3,"ADD");}//done
							   | Exp MUL Exp {$$=Exp EXP($1,$2,$3,"MUL");}//done
							   | LPAREN Type RPAREN Exp {$$=Exp EXP($2,$4);};//todo handle casting

%%

int main()
{
	return yyparse();
}

int yyerror(const char * message)
{
	output::errorSyn(yylineno);
	exit(0);
}
