%{
	#include <iostream>
	#include <stdlib.h>
	using namespace std;
	extern int yylex();
	int yyerror(const char * message);
	#include "hw3_output.hpp"
	#include "classes.hpp"
%}

%nonassoc VOID;//
%nonassoc INT;//
%nonassoc BYTE;//
%nonassoc B;//
%nonassoc BOOL;///
%nonassoc ENUM;////
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMA;
%nonassoc LBRACE;
%nonassoc RBRACE;
%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%right ASSIGN;
%left OR;
%left AND;
%left RELOPL;
%nonassoc RELOPN;
%left ADD;
%left MUL;
%left RPAREN;
%right IF;
%right ELSE;
%left LPAREN;
%right NOT;
%nonassoc XXX;
%nonassoc XX;
%%

Program :		  	 {$$=Program PROGRAM;} Enums Funcs;
Funcs :	     	    %prec XXX {$$=Funcs FUNCS;}
								 | FuncDecl Funcs %prec XX{$$=Funcs FUNCS};

FuncDecl :   	   RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE {$$=FuncsDecl FUNCDECL($1,$2,$4)};
Enums :			  	   //epsilon
								 | EnumDecl Enums {};//this is empty on purpose
EnumDecl :   	   ENUM ID LBRACE EnumeratorList RBRACE SC {$$=EnumDecl ENUMDECL($2,$4);};
RetType : 	  	 Type {$$=RetType RETTYPE($1);}
								 | VOID {$$=RetType RETTYPE($1);};
Formals :     	   {}
								 |FormalsList {$$=Formals FORMALS($1);};
FormalsList : 	 FormalDecl {$$=FormalsList FORMALLIST($1);}
								 | FormalDecl COMMA FormalsList {$$=FormalsList FORMALLIST($2,$1);};
FormalDecl :  	 Type ID {$$=FormalDecl FORMALDECL($1,$2);}//checking that the types exist
								 | EnumType ID {$$=FormalDecl FORMALDECL($1,$2);};
EnumeratorList : Enumerator  {$$=EnumeratorList ENUMERATORLIST($1);}
								 | EnumeratorList COMMA Enumerator {$$=EnumeratorList ENUMERATORLIST($1,$2);};
Enumerator : 		 ID {$$=Enumerator ENUMARATOR($1);};
Statements : 	   Statement {output::printProductionRule(19);}
								 | Statements Statement {output::printProductionRule(20);};
Statement : 		 LBRACE Statements RBRACE {output::printProductionRule(21);}
								 | Type ID SC {output::printProductionRule(22);}
								 | EnumType ID SC {output::printProductionRule(23);}
								 | EnumDecl {output::printProductionRule(24);}
								 | Type ID ASSIGN Exp SC {output::printProductionRule(25);}
								 | EnumType ID ASSIGN Exp SC {output::printProductionRule(26);}
								 | ID ASSIGN Exp SC {output::printProductionRule(27);}
								 | Call SC {output::printProductionRule(28);}
								 | RETURN SC {output::printProductionRule(29);}
								 | RETURN Exp SC {output::printProductionRule(30);}
								 | IF LPAREN Exp RPAREN Statement {output::printProductionRule(31);}
								 | IF LPAREN Exp RPAREN Statement ELSE Statement {output::printProductionRule(32);}

								 | WHILE LPAREN Exp RPAREN Statement {output::printProductionRule(33);}
								 | BREAK SC {output::printProductionRule(34);}
								 | CONTINUE SC {output::printProductionRule(35);};
Call :       	   ID LPAREN ExpList RPAREN {output::printProductionRule(36);}
								 | ID LPAREN RPAREN {output::printProductionRule(37);};
ExpList : 		 	 Exp {output::printProductionRule(38);}
								 | Exp COMMA ExpList {output::printProductionRule(39);};
Type : 		 			 INT {$$=Type TYPE($1)};//
								 | BYTE {$$=Type TYPE($1)};
								 | BOOL {$$=Type TYPE($1)};
EnumType : 	  	 ENUM ID {$$=EnumType ENUMTYPE($1,$2)};//
Exp :      	  	 LPAREN Exp RPAREN {output::printProductionRule(44);}
								 | Exp AND Exp {output::printProductionRule(54);}
								 | Exp OR Exp {output::printProductionRule(55);}
								 | ID {output::printProductionRule(46);}
								 | Call {output::printProductionRule(47);}
								 | NUM {output::printProductionRule(48);}
								 | NUM B {output::printProductionRule(49);}
  						   | STRING {output::printProductionRule(50);}
								 | TRUE {output::printProductionRule(51);}
								 | FALSE {output::printProductionRule(52);}
								 | NOT Exp {output::printProductionRule(53);}
								 | Exp RELOPL Exp {output::printProductionRule(56);}
								 | Exp RELOPN Exp {output::printProductionRule(56);}
  						   | Exp ADD Exp {output::printProductionRule(45);}
							   | Exp MUL Exp {output::printProductionRule(45);}
							   |  LPAREN Type RPAREN Exp {output::printProductionRule(57);};

%%

int main()
{
	return yyparse();
}

int yyerror(const char * message)
{
	output::errorSyn(yylineno);
	exit(0);
}
